{"version":3,"sources":["data/opcodes.js","tables/opcode.js","App.js","reportWebVitals.js","index.js"],"names":["key","opcode","mnemonic","color","description","cycles","details","Text","Typography","opcodeTableCols","title","dataIndex","filters","text","value","onFilter","record","includes","filterSearch","width","render","sorter","a","b","sortDirections","toString","d","strong","italic","Header","Layout","Content","Footer","App","useState","page","setPage","mainContent","columns","dataSource","opcodes","pagination","className","onSelect","theme","mode","defaultSelectedKeys","Item","style","padding","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","document","getElementById"],"mappings":"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AO,OAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,KACNC,MAAO,MAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,KACNC,MAAO,MAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,KACNC,MAAO,MAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,MACNC,MAAO,QAET,CACED,KAAM,gBACNC,MAAO,iBAET,CACED,KAAM,oBACNC,MAAO,qBAET,CACED,KAAM,iBACNC,MAAO,kBAET,CACED,KAAM,oBACNC,MAAO,qBAET,CACED,KAAM,YACNC,MAAO,aAET,CACED,KAAM,cACNC,MAAO,eAET,CACED,KAAM,YACNC,MAAO,aAET,CACED,KAAM,cACNC,MAAO,eAET,CACED,KAAM,YACNC,MAAO,aAET,CACED,KAAM,cACNC,MAAO,eAET,CACED,KAAM,YACNC,MAAO,aAET,CACED,KAAM,cACNC,MAAO,eAET,CACED,KAAM,YACNC,MAAO,aAET,CACED,KAAM,cACNC,MAAO,eAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,KACNC,MAAO,MAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,KACNC,MAAO,MAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,MACNC,MAAO,OAET,CACED,KAAM,OACNC,MAAO,SAGXC,SAAU,SAACD,EAAOE,GAAR,OAAmBA,EAAOd,SAASe,SAASH,IACtDI,cAAc,EACdC,MAAO,MACPnB,IAAK,WACLoB,OAAQ,SAACP,EAAD,OAASV,EAAT,EAASA,MAAT,OAAqB,cAAC,IAAD,CAAKA,MAAOA,EAAZ,SAAoBU,MAEnD,CACEH,MAAO,SACPC,UAAW,SACXX,IAAK,SACLqB,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAErB,OAASsB,EAAEtB,QAC/BuB,eAAgB,CAAC,UAAW,UAC5BJ,OAAQ,SAAAP,GAAI,OAAI,cAACN,EAAD,sBAAYM,EAAKY,SAAS,SAE5C,CACEf,MAAO,cACPC,UAAW,cACXX,IAAK,cACLoB,OAAQ,SAACP,EAAMa,GAAP,OACN,gCACE,cAACnB,EAAD,CAAMoB,QAAM,EAAZ,SAAcd,IAAY,uBAC1B,cAACN,EAAD,CAAMqB,QAAM,EAAZ,SAAcF,EAAEpB,eAItB,CACEI,MAAO,eACPV,IAAK,SACLW,UAAW,SACXU,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEjB,OAASkB,EAAElB,QAC/BmB,eAAgB,CAAC,UAAW,YC5P1BK,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OACRxB,IAATD,KAuDO0B,MArDf,WACE,MAAwBC,mBAAS,WAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEIC,EAAc,wBA6BlB,MA5Ba,YAATF,IACFE,EACA,cAAC,IAAD,CACEC,QAAS7B,EACT8B,WAAYC,EACZC,YAAY,KAKH,iBAATN,IACFE,EACE,+CAIS,cAATF,IACFE,EACE,4CAIS,iBAATF,IACFE,EACE,2CAKF,eAAC,IAAD,CAAQK,UAAU,SAAlB,UACA,cAACb,EAAD,UACE,eAAC,IAAD,CAAMc,SAAU,gBAAG3C,EAAH,EAAGA,IAAH,OAAaoC,EAAQpC,IAAM4C,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAACX,GAAhG,UACE,cAAC,IAAKY,KAAN,0BAAe,gBACf,cAAC,IAAKA,KAAN,qBAAe,WACf,cAAC,IAAKA,KAAN,uBAAe,aACf,cAAC,IAAKA,KAAN,sBAAe,YACf,cAAC,IAAKA,KAAN,uBAAe,kBAGnB,cAAChB,EAAD,CAASiB,MAAO,CAAEC,QAAS,UAA3B,SACE,qBAAKP,UAAU,sBAAf,SACGL,MAGL,cAACL,EAAD,CAAQgB,MAAO,CAAEE,UAAW,UAA5B,wCC3CWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCCdhC,iBACE,cAAC,IAAMwC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.0c22891d.chunk.js","sourcesContent":["export default [\n    {\n        key: '0x00',\n        opcode: 0x00,\n        mnemonic: \"NOOP\",\n        color: \"blue\",\n        description: 'No operation',\n        cycles: 3\n    },\n    {\n        key: '0x01',\n        opcode: 0x01,\n        mnemonic: \"MOV a, %r\",\n        color: \"red\",\n        description: 'Copy data from register* to Accumulator',\n        details: 'Registers(r) = a, c, d, e, f, x, sp, pc',\n        cycles: 5\n    },\n    {\n        key: '0x02',\n        opcode: 0x02,\n        mnemonic: \"MOV a, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to Accumulator',\n        details: 'h, b, d',\n        cycles: 5\n    },\n    {\n        key: '0x03',\n        opcode: 0x03,\n        mnemonic: \"MOV a, $mem\",\n        color: \"red\",\n        description: 'Copy memory data to Accumulator',\n        details: '$dd:ff, $dd:ffff',\n        cycles: 5\n    },\n    {\n        key: '0x04',\n        opcode: 0x04,\n        mnemonic: \"MOV c, %r\",\n        color: \"red\",\n        description: 'Copy data from register* to C register',\n        details: 'Registers(r) = a, c, d, e, f, x, sp, pc',\n        cycles: 5\n    },\n    {\n        key: '0x05',\n        opcode: 0x05,\n        mnemonic: \"MOV c, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to C register',\n        details: 'h, b, d',\n        cycles: 5\n    },\n    {\n        key: '0x06',\n        opcode: 0x06,\n        mnemonic: \"MOV c, $mem\",\n        color: \"red\",\n        description: 'Copy memory data to C register',\n        details: '$dd:ff, $dd:ffff',\n        cycles: 5\n    },\n    {\n        key: '0x07',\n        opcode: 0x07,\n        mnemonic: \"MOV d, %r\",\n        color: \"red\",\n        description: 'Copy data from register* to D register',\n        details: 'Registers(r) = a, c, d, e, f, x, sp, pc',\n        cycles: 5\n    },\n    {\n        key: '0x08',\n        opcode: 0x08,\n        mnemonic: \"MOV d, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to D register',\n        details: 'h, b, d',\n        cycles: 5\n    },\n    {\n        key: '0x09',\n        opcode: 0x09,\n        mnemonic: \"MOV d, $mem\",\n        color: \"red\",\n        description: 'Copy memory data to D register',\n        details: '$dd:ff, $dd:ffff',\n        cycles: 5\n    },\n    {\n        key: '0x0A',\n        opcode: 0x0A,\n        mnemonic: \"MOV e, %r\",\n        color: \"red\",\n        description: 'Copy data from register* to E register',\n        details: 'Registers(r) = a, c, d, e, f, x, sp, pc',\n        cycles: 5\n    },\n    {\n        key: '0x0B',\n        opcode: 0x0B,\n        mnemonic: \"MOV e, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to E register',\n        details: 'h, b, d',\n        cycles: 5\n    },\n    {\n        key: '0x0C',\n        opcode: 0x0C,\n        mnemonic: \"MOV e, $mem\",\n        color: \"red\",\n        description: 'Copy memory data to E register',\n        details: '$dd:ff, $dd:ffff',\n        cycles: 5\n    },\n    {\n        key: '0x0D',\n        opcode: 0x0D,\n        mnemonic: \"MOV f, %r\",\n        color: \"red\",\n        description: 'Copy data from register* to F register',\n        details: 'Registers(r) = a, c, d, e, f, x, sp, pc',\n        cycles: 5\n    },\n    {\n        key: '0x0E',\n        opcode: 0x0E,\n        mnemonic: \"MOV f, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to F register',\n        details: 'h, b, d',\n        cycles: 5\n    },\n    {\n        key: '0x0F',\n        opcode: 0x0F,\n        mnemonic: \"MOV f, $mem\",\n        color: \"red\",\n        description: 'Copy memory data to F register',\n        details: '$dd:ff, $dd:ffff',\n        cycles: 5\n    },\n    {\n        key: '0x10',\n        opcode: 0x10,\n        mnemonic: \"MOV x, %r\",\n        color: \"red\",\n        description: 'Copy data from register* to Constant(x) register',\n        details: 'Registers(r) = a, c, d, e, f, x, sp, pc',\n        cycles: 5\n    },\n    {\n        key: '0x11',\n        opcode: 0x11,\n        mnemonic: \"MOV x, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to Constant(x) register',\n        details: 'h, b, d',\n        cycles: 5\n    },\n    {\n        key: '0x12',\n        opcode: 0x12,\n        mnemonic: \"MOV x, $mem\",\n        color: \"red\",\n        description: 'Copy memory data to Constant(x) register',\n        details: '$dd:ff, $dd:ffff',\n        cycles: 5\n    },\n    {\n        key: '0x13',\n        opcode: 0x13,\n        mnemonic: \"MOV sp, %r\",\n        color: \"red\",\n        description: 'Copy data from register* to Stack Pointer(sp) register',\n        details: 'Registers(r) = a, c, d, e, f, x, sp, pc',\n        cycles: 5\n    },\n    {\n        key: '0x14',\n        opcode: 0x14,\n        mnemonic: \"MOV sp, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to Stack Pointer(sp) register',\n        details: 'h, b, d',\n        cycles: 5\n    },\n    {\n        key: '0x15',\n        opcode: 0x15,\n        mnemonic: \"MOV sp, $mem\",\n        color: \"red\",\n        description: 'Copy memory data to Stack Pointer(sp) register',\n        details: '$dd:ff, $dd:ffff',\n        cycles: 5\n    },\n    {\n        key: '0x16',\n        opcode: 0x16,\n        mnemonic: \"MOV pc, %r\",\n        color: \"red\",\n        description: 'Copy data from register* to Program Counter(pc) register',\n        details: 'Registers(r) = a, c, d, e, f, x, sp, pc',\n        cycles: 5\n    },\n    {\n        key: '0x17',\n        opcode: 0x17,\n        mnemonic: \"MOV pc, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to Program Counter(pc) register',\n        details: 'h, b, d',\n        cycles: 5\n    },\n    {\n        key: '0x18',\n        opcode: 0x18,\n        mnemonic: \"MOV pc, $mem\",\n        color: \"red\",\n        description: 'Copy memory data to Program Counter(pc) register',\n        details: '$dd:ff, $dd:ffff',\n        cycles: 5\n    },\n    {\n        key: '0x19',\n        opcode: 0x19,\n        mnemonic: \"MOV ds, imm\",\n        color: \"red\",\n        description: 'Copy immediate data to Data Segment(ds) register',\n        details: '0xf',\n        cycles: 5\n    },\n    {\n        key: '0x1A',\n        opcode: 0x1A,\n        mnemonic: \"\",\n        color: \"red\",\n        description: '',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x1B',\n        opcode: 0x1B,\n        mnemonic: \"MOV sp, %rr\",\n        color: \"red\",\n        description: 'Copies 2 GPRs data (MSB and LSB), into the Stack Pointer(sp)',\n        details: 'ac, ad, ae, af, ca, cd, ce, cf, da, dc, de, df, ea, ec, ed, ef, fa, fc, fd, fe',\n        cycles: 5\n    },\n    {\n        key: '0x1C',\n        opcode: 0x1C,\n        mnemonic: \"MOV spl, %r\",\n        color: \"red\",\n        description: \"Copies 1 GPRs data into the Stack Pointer's least significant byte setting the MSB to 0x0\",\n        details: 'a, c, d, e, f, x',\n        cycles: 5\n    },\n    {\n        key: '0x1D',\n        opcode: 0x1D,\n        mnemonic: \"MOV sph, %r\",\n        color: \"red\",\n        description: \"Copies 1 GPRs data into the Stack Pointer's most significant byte setting the LSB to 0x0\",\n        details: 'a, c, d, e, f, x',\n        cycles: 5\n    },\n    {\n        key: '0x1E',\n        opcode: 0x1E,\n        mnemonic: \"ADD a, imm\",\n        color: \"purple\",\n        description: 'Adds an immediate value to the Accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x1F',\n        opcode: 0x1F,\n        mnemonic: \"ADD a, %r\",\n        color: \"purple\",\n        description: 'Adds the value of any GPR(r) to the Accumulator',\n        details: 'a, c, d, e, f, x',\n        cycles: 5\n    },\n    {\n        key: '0x20',\n        opcode: 0x20,\n        mnemonic: \"ADD a, $mem\",\n        color: \"purple\",\n        description: 'Adds the 8bit value stored at the memory address given to the accumulator',\n        details: '0xff',\n        cycles: 5\n    },\n    {\n        key: '0x21',\n        opcode: 0x21,\n        mnemonic: \"SUB a, imm\",\n        color: \"purple\",\n        description: 'Subtracts an immediate value from the Accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x22',\n        opcode: 0x22,\n        mnemonic: \"SUB a, %r\",\n        color: \"purple\",\n        description: 'Subtracts the value of any GPR(r) from the Accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x23',\n        opcode: 0x23,\n        mnemonic: \"SUB a, $mem\",\n        color: \"purple\",\n        description: 'Subtracts the 8bit value stored at the memory address given from the accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x24',\n        opcode: 0x24,\n        mnemonic: \"DEC a\",\n        color: \"purple\",\n        description: 'Subtracts 1 from the accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x25',\n        opcode: 0x25,\n        mnemonic: \"NOT a\",\n        color: \"purple\",\n        description: 'Bitwise NOT on the accumulator. Inverts.',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x26',\n        opcode: 0x26,\n        mnemonic: \"AND a, imm\",\n        color: \"purple\",\n        description: 'Bitwise AND with an immediate value',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x27',\n        opcode: 0x27,\n        mnemonic: \"AND a, %r\",\n        color: \"purple\",\n        description: 'Performs a bitwise AND against another GPR',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x28',\n        opcode: 0x28,\n        mnemonic: \"AND a, $mem\",\n        color: \"purple\",\n        description: 'Performs a bitwise AND against the value stored in RAM, at the given address, to the accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x29',\n        opcode: 0x29,\n        mnemonic: \"NAND a, imm\",\n        color: \"purple\",\n        description: 'Bitwise NAND with an immediate value',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x2A',\n        opcode: 0x2A,\n        mnemonic: \"NAND a, %r\",\n        color: \"purple\",\n        description: 'Performs a bitwise NAND against another GPR',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x2B',\n        opcode: 0x2B,\n        mnemonic: \"NAND a, $mem\",\n        color: \"purple\",\n        description: 'Performs a bitwise NAND against the value stored in RAM, at the given address, to the accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x2C',\n        opcode: 0x2C,\n        mnemonic: \"OR a, imm\",\n        color: \"purple\",\n        description: 'Bitwise OR with an immediate value',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x2D',\n        opcode: 0x2D,\n        mnemonic: \"OR a, %r\",\n        color: \"purple\",\n        description: 'Performs a bitwise OR against another GPR',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x2E',\n        opcode: 0x2E,\n        mnemonic: \"OR a, $mem\",\n        color: \"purple\",\n        description: 'Performs a bitwise OR against the value stored in RAM, at the given address, to the accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x2F',\n        opcode: 0x2F,\n        mnemonic: \"NOR a, imm\",\n        color: \"purple\",\n        description: 'Bitwise NOR with an immediate value',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x30',\n        opcode: 0x30,\n        mnemonic: \"NOR a, %r\",\n        color: \"purple\",\n        description: 'Performs a bitwise NOR against another GPR',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x31',\n        opcode: 0x31,\n        mnemonic: \"NOR a, $mem\",\n        color: \"purple\",\n        description: 'Performs a bitwise NOR against the value stored in RAM, at the given address, to the accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x32',\n        opcode: 0x32,\n        mnemonic: \"XOR a, imm\",\n        color: \"purple\",\n        description: 'Bitwise XOR with an immediate value',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x33',\n        opcode: 0x33,\n        mnemonic: \"XOR a, %r\",\n        color: \"purple\",\n        description: 'Performs a bitwise XOR against another GPR',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x34',\n        opcode: 0x34,\n        mnemonic: \"XOR a, $mem\",\n        color: \"purple\",\n        description: 'Performs a bitwise XOR against the value stored in RAM, at the given address, to the accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x35',\n        opcode: 0x35,\n        mnemonic: \"XNOR a, imm\",\n        color: \"purple\",\n        description: 'Bitwise XNOR with an immediate value',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x36',\n        opcode: 0x36,\n        mnemonic: \"XNOR a, %r\",\n        color: \"purple\",\n        description: 'Performs a bitwise XNOR against another GPR',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x37',\n        opcode: 0x37,\n        mnemonic: \"XNOR a, $mem\",\n        color: \"purple\",\n        description: 'Performs a bitwise XNOR against the value stored in RAM, at the given address, to the accumulator',\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x38',\n        opcode: 0x38,\n        mnemonic: \"CMP a, imm\",\n        color: \"purple\",\n        description: \"Compare immediate value with accumulator\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x39',\n        opcode: 0x39,\n        mnemonic: \"CMP a, %r\",\n        color: \"purple\",\n        description: \"Compare register value with accumulator\",\n        details: 'a, c, d, e, f, x',\n        cycles: 5\n    },\n    {\n        key: '0x3A',\n        opcode: 0x3A,\n        mnemonic: \"CMP a, $mem\",\n        color: \"purple\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x3B',\n        opcode: 0x3B,\n        mnemonic: \"TEST a, imm\",\n        color: \"purple\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x3C',\n        opcode: 0x3C,\n        mnemonic: \"TEST a, %r\",\n        color: \"purple\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x3D',\n        opcode: 0x3D,\n        mnemonic: \"TEST a, $mem\",\n        color: \"purple\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x3E',\n        opcode: 0x3E,\n        mnemonic: \"SHL a\",\n        color: \"purple\",\n        description: \"Shifts the accumulator left one bit, puts 0x0 into LSB.\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x3F',\n        opcode: 0x3F,\n        mnemonic: \"SHR a\",\n        color: \"purple\",\n        description: \"Shifts the accumulator right one bit, puts 0x0 into MSB.\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x40',\n        opcode: 0x40,\n        mnemonic: \"\",\n        color: \"purple\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x41',\n        opcode: 0x41,\n        mnemonic: \"PUSH r\",\n        color: \"blue\",\n        description: \"Pushes a register onto the stack\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x42',\n        opcode: 0x42,\n        mnemonic: \"PULL r\",\n        color: \"blue\",\n        description: \"Pulls the value from the stack into a register\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x43',\n        opcode: 0x43,\n        mnemonic: \"\",\n        color: \"\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x44',\n        opcode: 0x44,\n        mnemonic: \"\",\n        color: \"\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x45',\n        opcode: 0x45,\n        mnemonic: \"JNO, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x46',\n        opcode: 0x46,\n        mnemonic: \"JNOF, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x47',\n        opcode: 0x47,\n        mnemonic: \"JNO, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x48',\n        opcode: 0x48,\n        mnemonic: \"JNOF, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x49',\n        opcode: 0x49,\n        mnemonic: \"JS, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x4A',\n        opcode: 0x4A,\n        mnemonic: \"JSF, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x4B',\n        opcode: 0x4B,\n        mnemonic: \"JS, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x4C',\n        opcode: 0x4C,\n        mnemonic: \"JSF, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x4D',\n        opcode: 0x4D,\n        mnemonic: \"JNS, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x4E',\n        opcode: 0x4E,\n        mnemonic: \"JNSF, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x4F',\n        opcode: 0x4F,\n        mnemonic: \"JNS, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x50',\n        opcode: 0x50,\n        mnemonic: \"JNSF, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x51',\n        opcode: 0x51,\n        mnemonic: \"JE (JZ), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x52',\n        opcode: 0x52,\n        mnemonic: \"JEF (JZF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x53',\n        opcode: 0x53,\n        mnemonic: \"JE (JZ), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x54',\n        opcode: 0x54,\n        mnemonic: \"JEF (JZF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x55',\n        opcode: 0x55,\n        mnemonic: \"JNE (JNZ), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x56',\n        opcode: 0x56,\n        mnemonic: \"JNEF (JNZF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x57',\n        opcode: 0x57,\n        mnemonic: \"JNE (JNZ), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x58',\n        opcode: 0x58,\n        mnemonic: \"JNEF (JNZF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x59',\n        opcode: 0x59,\n        mnemonic: \"JB (JNAE, JC), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x5A',\n        opcode: 0x5A,\n        mnemonic: \"JBF (JNAEF, JCF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x5B',\n        opcode: 0x5B,\n        mnemonic: \"JB (JNAE, JC), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x5C',\n        opcode: 0x5C,\n        mnemonic: \"JBF (JNAEF, JCF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x5D',\n        opcode: 0x5D,\n        mnemonic: \"JNB (JAE, JNC), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x5E',\n        opcode: 0x5E,\n        mnemonic: \"JNBF (JAEF, JNCF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x5F',\n        opcode: 0x5F,\n        mnemonic: \"JNB (JAE, JNC), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x60',\n        opcode: 0x60,\n        mnemonic: \"JNBF (JAEF, JNCF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x61',\n        opcode: 0x61,\n        mnemonic: \"JBE (JNA), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x62',\n        opcode: 0x62,\n        mnemonic: \"JBEF (JNAF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x63',\n        opcode: 0x63,\n        mnemonic: \"JBE (JNA), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x64',\n        opcode: 0x64,\n        mnemonic: \"JBEF (JNAF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x65',\n        opcode: 0x65,\n        mnemonic: \"JA (JNBE), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x66',\n        opcode: 0x66,\n        mnemonic: \"JAF (JNBEF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x67',\n        opcode: 0x67,\n        mnemonic: \"JA (JNBE), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x68',\n        opcode: 0x68,\n        mnemonic: \"JAF (JNBEF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x69',\n        opcode: 0x69,\n        mnemonic: \"JL (JNGE), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x6A',\n        opcode: 0x6A,\n        mnemonic: \"JLF (JNGEF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x6B',\n        opcode: 0x6B,\n        mnemonic: \"JL (JNGE), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x6C',\n        opcode: 0x6C,\n        mnemonic: \"JLF (JNGEF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x6D',\n        opcode: 0x6D,\n        mnemonic: \"JGE (JNL), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x6E',\n        opcode: 0x6E,\n        mnemonic: \"JGEF (JNLF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x6F',\n        opcode: 0x6F,\n        mnemonic: \"JGE (JNL), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x70',\n        opcode: 0x70,\n        mnemonic: \"JGEF (JNLF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x71',\n        opcode: 0x71,\n        mnemonic: \"JG (JNLE), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x72',\n        opcode: 0x72,\n        mnemonic: \"JGF (JNLEF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x73',\n        opcode: 0x73,\n        mnemonic: \"JG (JNLE), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x74',\n        opcode: 0x74,\n        mnemonic: \"JGF (JNLEF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x75',\n        opcode: 0x75,\n        mnemonic: \"JLE (JNG), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x76',\n        opcode: 0x76,\n        mnemonic: \"JLEF (JNGF), imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x77',\n        opcode: 0x77,\n        mnemonic: \"JLE (JNG), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x78',\n        opcode: 0x78,\n        mnemonic: \"JLEF (JNGF), $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x79',\n        opcode: 0x79,\n        mnemonic: \"JMP, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x7A',\n        opcode: 0x7A,\n        mnemonic: \"JMPF, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x7B',\n        opcode: 0x7B,\n        mnemonic: \"JMP, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x7C',\n        opcode: 0x7C,\n        mnemonic: \"JMPF, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x7D',\n        opcode: 0x7D,\n        mnemonic: \"JO, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x7E',\n        opcode: 0x7E,\n        mnemonic: \"JO, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x7F',\n        opcode: 0x7F,\n        mnemonic: \"JOF, imm\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x80',\n        opcode: 0x80,\n        mnemonic: \"JOF, $mem\",\n        color: \"green\",\n        description: \"\",\n        details: '',\n        cycles: 5\n    },\n\n    {\n        key: '0x81',\n        opcode: 0x81,\n        mnemonic: \"OUT p, imm\",\n        color: \"blue\",\n        description: \"Sends a byte from accumulator out on given port\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x82',\n        opcode: 0x82,\n        mnemonic: \"OUT p, %r\",\n        color: \"blue\",\n        description: \"Sends a byte from accumulator out on given port\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x83',\n        opcode: 0x83,\n        mnemonic: \"OUT p, $mem\",\n        color: \"blue\",\n        description: \"Sends a byte from accumulator out on given port\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x84',\n        opcode: 0x84,\n        mnemonic: \"IN p, %r\",\n        color: \"blue\",\n        description: \"Reads a byte from given port into a register\",\n        details: 'a, c, d, e, f, x',\n        cycles: 5\n    },\n    {\n        key: '0x85',\n        opcode: 0x85,\n        mnemonic: \"SERO\",\n        color: \"blue\",\n        description: \"Sends accumulator out on Serial Port\",\n        details: '',\n        cycles: 5\n    },\n    {\n        key: '0x86',\n        opcode: 0x86,\n        mnemonic: \"SERI\",\n        color: \"blue\",\n        description: \"Reads a byte from serial port into the accumulator\",\n        details: '',\n        cycles: 5\n    },\n\n\n\n\n\n\n    {\n        key: '0xFC',\n        opcode: 0xFC,\n        mnemonic: \"RTI\",\n        color: \"blue\",\n        description: \"Returns from Interrupt\",\n        details: '',\n        cycles: 2\n    },\n\n    {\n        key: '0xFD',\n        opcode: 0xFD,\n        mnemonic: \"RTS\",\n        color: \"blue\",\n        description: \"Returns from subroutine\",\n        details: '',\n        cycles: 2\n    },\n\n    {\n        key: '0xFE',\n        opcode: 0xFE,\n        mnemonic: \"RST\",\n        color: \"volcano\",\n        description: \"Resets the computer setting PC to 0x0:0 and clearing registers.\",\n        details: '',\n        cycles: 2\n    },\n    {\n        key: '0xFF',\n        opcode: 0xFF,\n        mnemonic: \"HALT\",\n        color: \"volcano\",\n        description: \"Halts the computers CPU\",\n        details: '',\n        cycles: 2\n    },\n];","import { Tag, Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport const opcodeTableCols = [\n    {\n      title: 'Mnemonic',\n      dataIndex: 'mnemonic',\n      filters: [\n        {\n          text: 'MOV',\n          value: 'MOV',\n        },\n        {\n          text: 'ADD',\n          value: 'ADD',\n        },\n        {\n          text: 'SUB',\n          value: 'SUB',\n        },\n        {\n          text: 'DEC',\n          value: 'DEC',\n        },\n        {\n          text: 'NOT',\n          value: 'NOT',\n        },\n        {\n          text: 'AND',\n          value: 'AND',\n        },\n        {\n          text: 'NAND',\n          value: 'NAND',\n        },\n        {\n          text: 'OR',\n          value: 'OR',\n        },\n        {\n          text: 'NOR',\n          value: 'NOR',\n        },\n        {\n          text: 'XOR',\n          value: 'XOR',\n        },\n        {\n          text: 'XNOR',\n          value: 'XNOR',\n        },\n        {\n          text: 'CMP',\n          value: 'CMP',\n        },\n        {\n          text: 'TEST',\n          value: 'TEST',\n        },\n        {\n          text: 'SHL',\n          value: 'SHL',\n        },\n        {\n          text: 'SHR',\n          value: 'SHR',\n        },\n        {\n          text: 'BIT',\n          value: 'BIT',\n        },\n        {\n          text: 'PUSH',\n          value: 'PUSH',\n        },\n        {\n          text: 'PULL',\n          value: 'PULL',\n        },\n        {\n          text: 'JO',\n          value: 'JO',\n        },\n        {\n          text: 'JOF',\n          value: 'JOF',\n        },\n        {\n          text: 'JNO',\n          value: 'JNO',\n        },\n        {\n          text: 'JNOF',\n          value: 'JNOF',\n        },\n        {\n          text: 'JS',\n          value: 'JS',\n        },\n        {\n          text: 'JSF',\n          value: 'JSF',\n        },\n        {\n          text: 'JNS',\n          value: 'JNS',\n        },\n        {\n          text: 'JNSF',\n          value: 'JNSF',\n        },\n        {\n          text: 'JE',\n          value: 'JE',\n        },\n        {\n          text: 'JEF',\n          value: 'JEF',\n        },\n        {\n          text: 'JNE',\n          value: 'JNEF',\n        },\n        {\n          text: 'JB (JNAE, JC)',\n          value: 'JB (JNAE, JC)',\n        },\n        {\n          text: 'JBF (JNAEF, JCF),',\n          value: 'JBF (JNAEF, JCF),',\n        },\n        {\n          text: 'JNB (JAE, JNC)',\n          value: 'JNB (JAE, JNC)',\n        },\n        {\n          text: 'JNBF (JAEF, JNCF)',\n          value: 'JNBF (JAEF, JNCF)',\n        },\n        {\n          text: 'JBE (JNA)',\n          value: 'JBE (JNA)',\n        },\n        {\n          text: 'JBEF (JNAF)',\n          value: 'JBEF (JNAF)',\n        },\n        {\n          text: 'JA (JNBE)',\n          value: 'JA (JNBE)',\n        },\n        {\n          text: 'JAF (JNBEF)',\n          value: 'JAF (JNBEF)',\n        },\n        {\n          text: 'JL (JNGE)',\n          value: 'JL (JNGE)',\n        },\n        {\n          text: 'JLF (JNGEF)',\n          value: 'JLF (JNGEF)',\n        },\n        {\n          text: 'JGE (JNL)',\n          value: 'JGE (JNL)',\n        },\n        {\n          text: 'JGEF (JNLF)',\n          value: 'JGEF (JNLF)',\n        },\n        {\n          text: 'JG (JNLE)',\n          value: 'JG (JNLE)',\n        },\n        {\n          text: 'JGF (JNLEF)',\n          value: 'JGF (JNLEF)',\n        },\n        {\n          text: 'JMP',\n          value: 'JMP',\n        },\n        {\n          text: 'JMPF',\n          value: 'JMPF',\n        },\n        {\n          text: 'JO',\n          value: 'JO',\n        },\n        {\n          text: 'JOF',\n          value: 'JOF',\n        },\n        {\n          text: 'OUT',\n          value: 'OUT',\n        },\n        {\n          text: 'IN',\n          value: 'IN',\n        },\n        {\n          text: 'SERO',\n          value: 'SERO',\n        },\n        {\n          text: 'SERI',\n          value: 'SERI',\n        },\n        {\n          text: 'RTI',\n          value: 'RTI',\n        },\n        {\n          text: 'RTS',\n          value: 'RTS',\n        },\n        {\n          text: 'HALT',\n          value: 'HALT',\n        },\n      ],\n      onFilter: (value, record) => record.mnemonic.includes(value),\n      filterSearch: true,\n      width: '40%',\n      key: 'mnemonic',\n      render: (text, { color }) => <Tag color={color}>{text}</Tag>,\n    },\n    {\n      title: 'Opcode',\n      dataIndex: 'opcode',\n      key: 'opcode',\n      sorter: (a, b) => a.opcode - b.opcode,\n      sortDirections: ['descend', 'ascend'],\n      render: text => <Text>{`0x${text.toString(16)}`}</Text>\n    },\n    {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'description',\n      render: (text, d) => (\n        <div>\n          <Text strong>{text}</Text><br/>\n          <Text italic>{d.details}</Text>\n        </div>\n      ),\n    },\n    {\n      title: 'Clock Cycles',\n      key: 'cycles',\n      dataIndex: 'cycles',\n      sorter: (a, b) => a.cycles - b.cycles,\n      sortDirections: ['descend', 'ascend'],\n    }\n  ];","import { Layout, Menu, Breadcrumb, Table, Typography } from 'antd';\nimport { useState } from 'react';\nimport opcodes from './data/opcodes';\nimport { opcodeTableCols } from './tables/opcode';\nconst { Header, Content, Footer } = Layout;\nconst { Text } = Typography;\n\nfunction App() {\n  const [page, setPage] = useState(\"opcodes\");\n\n  let mainContent = <div/>\n  if (page === 'opcodes') {\n    mainContent = (\n    <Table\n      columns={opcodeTableCols}\n      dataSource={opcodes}\n      pagination={false}\n    />\n    );\n  }\n\n  if (page === 'instructions') {\n    mainContent = (\n      <h1>Instructions</h1>\n    );\n  }\n\n  if (page === 'assembler') {\n    mainContent = (\n      <h1>Assembler</h1>\n    );\n  }\n\n  if (page === 'instructions') {\n    mainContent = (\n      <h1>Hardware</h1>\n    );\n  }\n\n  return (\n    <Layout className=\"layout\">\n    <Header>\n      <Menu onSelect={({ key }) => setPage(key)} theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[page]}>\n        <Menu.Item key=\"instructions\">Instructions</Menu.Item>\n        <Menu.Item key=\"opcodes\">OpCodes</Menu.Item>\n        <Menu.Item key=\"assembler\">Assembler</Menu.Item>\n        <Menu.Item key=\"hardware\">Hardware</Menu.Item>\n        <Menu.Item key=\"resources\">Resources</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px' }}>\n      <div className=\"site-layout-content\">\n        {mainContent}\n      </div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>Stephen Young ©2021</Footer>\n  </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { render } from 'react-snapshot';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}