import { Typography } from 'antd';
const { Text } = Typography;

const FETCH = [
    "Assert Program Countert(PC) to Address Bus | Load Memory Address Register(MAR) | Set Code Segment(CS) register active",
    "Assert memory data | Load instruction",
    "Increment Program Counter"
];

export default [
    {mnemonic: "NOOP", group: "CPU", description: "No operation",  useage: ["NOOP"], flags: [], operations: [...FETCH], notes: "No notes."},
    {mnemonic: "MOV", group: "REGISTER", description: <Text italic>Copies a value from one location to another</Text>,  useage: ["MOV a, imm", "MOV a, %r", "MOV a, $mem"], flags: [], operations: [...FETCH]},
    {mnemonic: "ADD", group: "ALU", description: "",  useage: ["ADD a, 55h", "ADD a, %c", "ADD a, $33"] , flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "SUB", group: "ALU", description: "",  useage: ["SUB a, 55h", "SUB a, %c", "SUB a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "DEC", group: "ALU", description: "",  useage: ["DEC a"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "NOT", group: "ALU", description: "",  useage: ["NOT a"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "AND", group: "ALU", description: "",  useage: ["AND a, 55h", "AND a, %c", "AND a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "NAND", group: "ALU", description: "",  useage: ["NAND a, 55h", "NAND a, %c", "NAND a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "OR", group: "ALU", description: "",  useage: ["OR a, 55h", "OR a, %c", "OR a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "NOR", group: "ALU", description: "",  useage: ["NOR a, 55h", "NOR a, %c", "NOR a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "XOR", group: "ALU", description: "",  useage: ["XOR a, 55h", "XOR a, %c", "XOR a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "XNOR", group: "ALU", description: "",  useage: ["XNOR a, 55h", "XNOR a, %c", "XNOR a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "CMP", group: "ALU", description: "",  useage: ["CMP a, 55h", "CMP a, %c", "CMP a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "TEST", group: "ALU", description: "",  useage: ["TEST a, 55h", "TEST a, %c", "TEST a, $33"], flags: ["CF", "ZF", "OF", "SF"], operations: [...FETCH]},
    {mnemonic: "SHL", group: "ALU", description: "",  useage: ["SHL %a"], flags: [], operations: [...FETCH]},
    {mnemonic: "SHR", group: "ALU", description: "",  useage: ["SHR %a"], flags: [], operations: [...FETCH]},
    {mnemonic: "PUSH", group: "SP", description: "",  useage: ["PUSH %r"], flags: [], operations: [...FETCH]},
    {mnemonic: "PULL", group: "SP", description: "",  useage: ["PULL %r"], flags: [], operations: [...FETCH]},
    {mnemonic: "JNO", group: "Conditional Jump", description: "Jump if not overflow",  useage: ["JNO $22"] , flags: ['OF = 0'], operations: [...FETCH]},
    {mnemonic: "JNOF", group: "Conditional Jump", description: "Far jump if not overflow",  useage: ["JNO $3:23"] , flags: ['OF = 0'], operations: [...FETCH]},
    {mnemonic: "JS", group: "Conditional Jump", description: "Jump if sign",  useage: ["JS $12"] , flags: ['SF = 1'], operations: [...FETCH]},
    {mnemonic: "JSF", group: "Conditional Jump", description: "Far jump if sign",  useage: ["JS $2:52"] , flags: ["SF = 1"], operations: [...FETCH]},
    {mnemonic: "JNS", group: "Conditional Jump", description: "Jump if not sign",  useage: ["JNS $52"] , flags: ["SF = 0"], operations: [...FETCH]},
    {mnemonic: "JNSF", group: "Conditional Jump", description: "Far jump if not sign",  useage: ["JNSF $2:52"] , flags: ["SF = 0"], operations: [...FETCH]},
    {mnemonic: "JE", group: "Conditional Jump", description: "Jump if equal",  useage: ["JE $52"] , flags: ["ZF = 1"], operations: [...FETCH]},
    {mnemonic: "JEF", group: "Conditional Jump", description: "Far jump if equal",  useage: ["JEF $2:52"] , flags: ["ZF = 1"], operations: [...FETCH]},
    {mnemonic: "JNE", group: "Conditional Jump", description: "Jump if not equal",  useage: ["JNE $52"] , flags: ["ZF = 0"], operations: [...FETCH]},
    {mnemonic: "JNEF", group: "Conditional Jump", description: "Far jump if not equal",  useage: ["JNEF $2:52"] , flags: ["ZF = 0"], operations: [...FETCH]},
    {mnemonic: "JB", group: "Conditional Jump", description: "Jump if below",  useage: ["JB $52"] , flags: ["CF = 1"], operations: [...FETCH]},
    {mnemonic: "JBF", group: "Conditional Jump", description: "Far jump if below",  useage: ["JBF $2:52"] , flags: ["CF = 1"], operations: [...FETCH]},
    {mnemonic: "JNB", group: "Conditional Jump", description: "Jump if not below",  useage: ["JNB $52"] , flags: ["CF = 0"], operations: [...FETCH]},
    {mnemonic: "JNBF", group: "Conditional Jump", description: "Far jump if not below",  useage: ["JNBF $2:52"] , flags: ["CF = 0"], operations: [...FETCH]},
    {mnemonic: "JBE", group: "Conditional Jump", description: "Jump if below or equal",  useage: ["JBE $52"] , flags: ["CF = 1 or ZF = 1"], operations: [...FETCH]},
    {mnemonic: "JBEF", group: "Conditional Jump", description: "Far jump if below or equal",  useage: ["JBEF $2:52"] , flags: ["CF = 1 or ZF = 1"], operations: [...FETCH]},
    {mnemonic: "JA", group: "Conditional Jump", description: "Jump if above",  useage: ["JA $52"] , flags: ["CF = 0 and ZF = 0"], operations: [...FETCH]},
    {mnemonic: "JAF", group: "Conditional Jump", description: "Far jump if above",  useage: ["JAF $2:52"] , flags: ["CF = 0 and ZF = 0"], operations: [...FETCH]},
    {mnemonic: "JL", group: "Conditional Jump", description: "Jump if less",  useage: ["JL $52"] , flags: ["SF <> OF"], operations: [...FETCH]},
    {mnemonic: "JLF", group: "Conditional Jump", description: "Far jump if less",  useage: ["JLF $2:52"] , flags: ["SF <> OF"], operations: [...FETCH]},
    {mnemonic: "JGE", group: "Conditional Jump", description: "Jump if greater or equal",  useage: ["JGE $52"] , flags: ["SF = OF"], operations: [...FETCH]},
    {mnemonic: "JGEF", group: "Conditional Jump", description: "Far jump if greater or equal",  useage: ["JGEF $2:52"] , flags: ["SF = OF"], operations: [...FETCH]},
    {mnemonic: "JG", group: "Conditional Jump", description: "Jump if greater",  useage: ["JG $52"] , flags: ["ZF = 0 and SF = OF"], operations: [...FETCH]},
    {mnemonic: "JGF", group: "Conditional Jump", description: "Far jump if greater",  useage: ["JGF $2:52"] , flags: ["ZF = 0 and SF = OF"], operations: [...FETCH]},
    {mnemonic: "JLE", group: "Conditional Jump", description: "Jump if less or equal",  useage: ["JLE $52"] , flags: ["ZF = 1 or SF <> OF"], operations: [...FETCH]},
    {mnemonic: "JLEF", group: "Conditional Jump", description: "Far jump if less or equal",  useage: ["JLEF $2:52"] , flags: ["ZF = 1 or SF <> OF"], operations: [...FETCH]},
    {mnemonic: "JMP", group: "Jump", description: "Jump (unconditional)",  useage: ["JUMP $52"] , flags: [], operations: [...FETCH]},
    {mnemonic: "JMPF", group: "Jump", description: "Far jump (unconditional)",  useage: ["JUMPF $2:52"] , flags: [], operations: [...FETCH]},
    {mnemonic: "JO", group: "Conditional Jump", description: "Jump if overflow",  useage: ["JO $52"] , flags: ["OF = 1"], operations: [...FETCH]},
    {mnemonic: "JOF", group: "Conditional Jump", description: "Far Jump if overflow",  useage: ["JOF $2:52"] , flags: ["OF = 1"], operations: [...FETCH]},
    {mnemonic: "OUT", group: "I/O", description: "Sends a byte of data to the I/O port provided from accumulator",  useage: [] , flags: [], operations: [...FETCH]},
    {mnemonic: "IN", group: "I/O", description: "Reads a byte of data from the I/O port provided and loads accumulator",  useage: [] , flags: [], operations: [...FETCH]},
    {mnemonic: "SERO", group: "I/O", description: "Sends a byte of data to the serial port from accumulator",  useage: [] , flags: [], operations: [...FETCH]},
    {mnemonic: "SERI", group: "I/O", description: "Reads a byte of data from the serial port and loads accumulator",  useage: [] , flags: [], operations: [...FETCH]},
    {mnemonic: "RTI", group: "RETURN", description: "Returns from interrupt, reloads program counter and flags",  useage: ["RTI"] , flags: [], operations: [...FETCH]},
    {mnemonic: "RTS", group: "RETURN", description: "Returns from subroutine, reloads program counter and flags",  useage: ["RTS"] , flags: [], operations: [...FETCH]},
    {mnemonic: "RST", group: "CPU", description: "Resets the CPU. Sets PC to $0:0h and resets registers.",  useage: ["RESET"] , flags: [], operations: [...FETCH]},
    {mnemonic: "HALT", group: "CPU", description: "Stops the Computers Clock",  useage: ["HALT"] , flags: [], operations: [...FETCH]},
];
